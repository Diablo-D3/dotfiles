#!/bin/sh

# Exit immediately if a command exits with a non-zero status
set -e

# Treat unset variables as an error when substituting
set -u

# Mark variables which are modified or created for export
set -a

# Chezmoi dirs
export SRC="${HOME}/.local/share/chezmoi"
export STATE="${HOME}/.config/chezmoi"

# Pretty printers
reset="$(tput sgr0)"
green="$(tput setaf 2)"
yellow="$(tput setaf 3)"
red="$(tput setaf 1)"
grey="$(tput setaf 8)"

_msg() {
    format="%s>>> $1 %s\n"
    shift
    # shellcheck disable=SC2059
    printf "${format}" "${green}" "$@" "${reset}"
}

_warn() {
    format="%s>>> $1 %s\n"
    shift
    # shellcheck disable=SC2059
    printf "${format}" "${yellow}" "$@" "${reset}"
}

_err() {
    format="%s>>> $1 %s\n"
    shift
    # shellcheck disable=SC2059
    printf "${format}" "${red}" "$@" "${reset}"
}

_quiet() {
    format="%s>>> $1 %s\n"
    shift
    # shellcheck disable=SC2059
    printf "${format}" "${grey}" "$@" "${reset}"
}

# Run command with sudo while making install-lib functions available
_sudo() {
    case "$(groups "${USER}" || true)" in
    *"sudo"*)
        IFS=" "
        sudo -E /bin/sh -c "$*"
        ;;
    *)
        _err "Cannot become root: %s" "$@"
        ;;
    esac
}

# Timestamp and checksum check
_check() {
    time_state="${STATE}/$(basename "$0" .sh).time"
    sum_state="${STATE}/$(basename "$0" .sh).sum"

    new_time="$(date +%s)"
    new_sum="$(sha256sum "$0")"

    _run=1

    if [ ! -f "${time_state}" ]; then
        printf "%s" "${new_time}" >"${time_state}"
    else
        old_time="$(cat "${time_state}")"
        if [ "${new_time}" -gt $((old_time + 86400)) ]; then
            printf "%s" "${new_time}" >"${time_state}"
            _run=0
        fi
    fi

    if [ ! -f "${sum_state}" ]; then
        printf "%s" "${new_sum}" >"${sum_state}"
    else
        old_sum="$(cat "${sum_state}")"
        if [ "${new_sum}" != "${old_sum}" ]; then
            printf "%s" "${new_sum}" >"${sum_state}"
            _run=0
        fi
    fi
}

# Download from github
_gh_dl() {
    user="$1"
    proj="$2"
    asset="$3"
    field="$4"
    target="$5"

    # Remove version signifier from asset name
    simple_asset="${asset:?}"
    simple_asset=$(echo "${simple_asset:?}" | sed -r "s/-v?VER//")
    simple_asset=$(echo "${simple_asset:?}" | sed -r "s/v?VER//")

    state="${HOME}/.config/chezmoi/${simple_asset:?}.ver"

    rm -f "/tmp/latest.json"
    wget -q "https://api.github.com/repos/${user}/${proj}/releases/latest" -O "/tmp/latest.json"

    if [ -f "/tmp/latest.json" ]; then
        # Match '"tag_name":', one or more whitespace, a double quote, flush the
        # match, match one or more non-whitespace characters until you reach one
        # a double quote.
        regex='"tag_name":\s*"\K\S+(?=")'
        ver="$(grep -oP "${regex}" "/tmp/latest.json")"

        # Many projects tag with tags that start with "vVER" but use "VER" in
        # asset filename; if asset uses "vVER", add this literally to $asset
        ver="$(echo "${ver:?}" | sed -r "s/^v//")"

        # Substitute latest release version into asset name
        asset=$(echo "${asset:?}" | sed -r "s/VER/${ver:?}/")

        # Do the same as tag_name, but with supplied field name to get url
        # browser_download_url, tarball_url and zipball_url are valid here.
        # If browser_download_url, only get url matching our asset name.
        if [ "${field:?}" = "browser_download_url" ]; then
            regex="\"${field:?}\":\\s*\"\\K\\S+${asset}(?=\")"
            url="$(grep -oP "${regex}" "/tmp/latest.json")"
        else
            regex="\"${field:?}\":\\s*\"\\K\\S+(?=\")"
            url="$(grep -oP "${regex}" "/tmp/latest.json")"
        fi

        check=1

        if [ ! -e "${state}" ]; then
            check=0
            printf "%s" "${ver}" >"${state}"
        else
            old=$(cat "${state}")

            if [ "${ver}" != "${old}" ]; then
                check=0
                printf "%s" "${ver}" >"${state}"
            fi
        fi

        if [ "${check}" -eq 0 ]; then
            tmp="$(mktemp)"

            _msg "Downloading %s %s" "${simple_asset}" "${ver}"

            #rm -f "${tmp}"
            if wget -q "${url:?}" -O "${tmp}" >/dev/null; then
                mkdir -p "$(dirname "${target}")"
                mv "${tmp}" "${target}"

                printf "%s" "${ver}" >"${state}"
            else
                _err "Failed to download %s" "${url}"
            fi
        else
            _quiet "Already have %s %s" "${simple_asset}" "${ver}"
        fi

        rm -f "/tmp/latest.json"
    else
        _err "Failed to download latest releases for %s/%s" "${user}" "${proj}"
    fi
}

# clone/pull a list of git repos
_git_list() {
    file="$1"
    base="$2"

    # Setup changelog
    log="/tmp/install-git-log"
    rm -f "${log}"

    case "${base}" in
    */) ;;
    *)
        base="${base}/"
        ;;
    esac

    # Clone or update repos

    # Read in repos from list, skip blank lines
    # shellcheck disable=SC2086
    while IFS= read -r repo && [ -n "${repo}" ]; do
        # Split "url,branch", skip blank urls or branches
        while IFS="," read -r url branch && [ -n "${url}" ] && [ -n "${branch}" ]; do
            # Skip comments
            case "${url}" in
            \#*) ;;
            *)
                name="${url##*/}"
                name="${name%%.git}"
                target="${base}${name}"

                if [ ! -d "${target}" ]; then
                    _msg "Cloning %s: " "${name}"
                    git clone --depth 1 --recurse-submodules --shallow-submodules --branch "${branch}" "${url}" "${target}"
                else
                    # Change branch if mismatch
                    orig_branch="$(git -C "${target}" branch --show current || true)"
                    if [ "${orig_branch}" != "${branch}" ]; then
                        _msg "Updating %s, %s -> %s:" "${name}" "${orig_branch}" "${branch}"
                        git -C "${target}" config "remote.origin.fetch" "+refs/heads/${branch}:refs/remotes/origin/${branch}"
                        git -C "${target}" config "branch.${branch}.remote" "origin"
                        git -C "${target}" config "branch.${branch}.merge" "refs/heads/${branch}"
                        git -C "${target}" config --unset "branch.${orig_branch}.remote"
                        git -C "${target}" config --unset "branch.${orig_branch}.merge"
                        git -C "${target}" fetch origin "${branch}"
                        git -C "${target}" switch "${branch}"
                    else
                        _msg "Updating %s:" "${name}"
                        orig_head="$(git -C "${target}" show-ref --hash "refs/heads/${branch}")"
                        git -C "${target}" pull --force --recurse-submodules=on-demand
                        new_head="$(git -C "${target}" show-ref --hash "refs/heads/${branch}")"
                    fi

                    # Output changelog
                    if [ "${orig_head}" != "${new_head}" ]; then
                        {
                            short="${target##*/}"
                            _msg "%s" "${short}"
                            git -C "${target}" log --color "${orig_head}".."${new_head}"
                            echo ""
                        } >>"${log}"
                    fi
                fi
                ;;
            esac
        done
        true
    done <$file

    # Display changelog
    if [ -f "${log}" ]; then
        less -rf "${log}"
    fi

    # Trim removed repos
    for dir in "${base}"*/; do
        found=0

        # Read in repos from list, skip blank lines
        # shellcheck disable=SC2086
        while IFS= read -r repo && [ -n "${repo}" ]; do
            # Split "url,branch", skip blank urls or branches
            while IFS="," read -r url branch && [ -n "${url}" ] && [ -n "${branch}" ]; do
                # Skip comments
                case "${url}" in
                \#*) ;;
                *)
                    name="${url##*/}"
                    name="${name%%.git}"
                    target="${base}${name}/"

                    if [ "${dir}" = "${target}" ]; then
                        found=1
                        break
                    fi
                    ;;
                esac
            done
        done <$file

        if [ "${found}" -eq 0 ]; then
            _warn "Removing ${dir}"
            rm -rf "${dir}"
        fi
    done
}
