#!/bin/sh

# Exit immediately if a command exits with a non-zero status
set -e

# Treat unset variables as an error when substituting
set -u

# Mark variables which are modified or created for export
set -a

# Chezmoi source dir
export SRC="${HOME}/.local/share/chezmoi"

# run command with sudo while making install-lib functions available
_sudo() {
    case "$(groups "${USER}" || true)" in
    *"sudo"*)
        IFS=" "
        sudo -E /bin/sh -c "$*"
        ;;
    *)
        printf "Cannot become root: %s" "$@"
        ;;
    esac
}

# Download from github
_gh_dl() {
    user="$1"
    proj="$2"
    asset="$3"
    field="$4"
    target="$5"

    # Remove version signifier from asset name
    simple_asset="${asset:?}"
    simple_asset=$(echo "${simple_asset:?}" | sed -r "s/-v?VER//")
    simple_asset=$(echo "${simple_asset:?}" | sed -r "s/v?VER//")

    state="${HOME}/.config/chezmoi/${simple_asset:?}.ver"

    rm -f "/tmp/latest.json"
    wget -q "https://api.github.com/repos/${user}/${proj}/releases/latest" -O "/tmp/latest.json"

    if [ -f "/tmp/latest.json" ]; then
        # Match '"tag_name":', one or more whitespace, a double quote, flush the
        # match, match one or more non-whitespace characters until you reach one
        # a double quote.
        regex='"tag_name":\s*"\K\S+(?=")'
        ver="$(grep -oP "${regex}" "/tmp/latest.json")"

        # Many projects tag with tags that start with "vVER" but use "VER" in
        # asset filename; if asset uses "vVER", add this literally to $asset
        ver="$(echo "${ver:?}" | sed -r "s/^v//")"

        # Substitute latest release version into asset name
        asset=$(echo "${asset:?}" | sed -r "s/VER/${ver:?}/")

        # Do the same as tag_name, but with supplied field name to get url
        # browser_download_url, tarball_url and zipball_url are valid here.
        # If browser_download_url, only get url matching our asset name.
        if [ "${field:?}" = "browser_download_url" ]; then
            regex="\"${field:?}\":\\s*\"\\K\\S+${asset}(?=\")"
            url="$(grep -oP "${regex}" "/tmp/latest.json")"
        else
            regex="\"${field:?}\":\\s*\"\\K\\S+(?=\")"
            url="$(grep -oP "${regex}" "/tmp/latest.json")"
        fi

        check=1

        if [ ! -e "${state}" ]; then
            check=0
            printf "%s" "${ver}" >"${state}"
        else
            old=$(cat "${state}")

            if [ "${ver}" != "${old}" ]; then
                check=0
                printf "%s" "${ver}" >"${state}"
            fi
        fi

        if [ "${check}" -eq 0 ]; then
            tmp="$(mktemp)"

            printf "Downloading %s %s\n" "${simple_asset}" "${ver}"

            #rm -f "${tmp}"
            if wget -q "${url:?}" -O "${tmp}" >/dev/null; then
                mkdir -p "$(dirname "${target}")"
                mv "${tmp}" "${target}"

                printf "%s" "${ver}" >"${state}"
            else
                printf "Failed to download %s\n" "${url}"
            fi
        else
            printf "Already have %s %s\n" "${simple_asset}" "${ver}"
        fi

        rm -f "/tmp/latest.json"
    else
        printf "Failed to download latest releases for %s/%s\n" "${user}" "${proj}"
    fi
}
