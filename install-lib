#!/usr/bin/env bash

###
### Boilerplate
###

# Exit immediately if a command exits with a non-zero status
set -e

# If set, the ERR trap is inherited by shell functions
set -E

# Treat unset variables as an error when substituting
set -u

# Return value of a pipeline is the last command to exit with a non-zero status
set -o pipefail

# Mark variables which are modified or created for export
set -a

# Allows patterns which match no files to expand to a null string
shopt -s nullglob

# Allow ** pattern
shopt -s globstar

# Allow extended regular expressions
shopt -s extglob

# Allow spaces in filenames and not explode
# https://dwheeler.com/essays/fixing-unix-linux-filenames.html
IFS="$(printf '\n\t')"

GREEN="$(tput setaf 2)"
RESET="$(tput sgr0)"
OFFSET=0

###
### Job Blocks
###

function _start() {
    if [ $OFFSET -ne 0 ]; then
        OFFSET=0
        echo -e ""
    fi

    echo -e "$GREEN==> $1$RESET"
}

function _end() {
    OFFSET=0
    echo -e ""
}

function _status() {
    OFFSET=1
    echo -e "$*"
}

###
### Wrappers
###

function _mkdir {
    mkdir -vp "$1"
}

function _ln {
    _mkdir "$(dirname "$2")"
    rm -f "$2"
    if [[ "$2" != "/mnt/c"* ]] && [[ "$2" != "/etc"* ]]; then
        ln -sTv "$1" "$2"
    else
        cp -Tv "$1" "$2"
    fi
}

# ln every file and mkdir every dir recursively, and retain . for hidden
# destinations
function _ln_descent {
    SRC_DIR="$1"
    DST_DIR="$2"

    if [[ "$DST_DIR" != */ ]] && [[ "$DST_DIR" != *. ]]; then
        DST_DIR="$DST_DIR/"
    fi

    for SRC in "$SRC_DIR"/**; do
        if [ -f "$SRC" ]; then
            DST="${SRC#$SRC_DIR/}"
            _ln "$SRC" "${DST_DIR}${DST}"
        elif [ -d "$SRC" ]; then
            _mkdir "${DST_DIR}${SRC#$SRC_DIR/}"
        else
            _status "Cannot handle $SRC"
        fi
    done
}

function _sudo() {
    if [[ $(groups "$USER") == *"sudo"* ]]; then
        local IFS=" "
        sudo -E bash -c "source $BASE_DIR/install-lib; $*"
    else
        _status "Cannot become root: " "$@"
    fi
}

###
### OS Wrappers
###

# run scoop, even when path is screwy
function _scoop() {
    # Scoop uses a batch file somewhere, cwd cannot be a UNC path
    OLDPWD="$(pwd)"
    cd "/mnt/c"

    # Always put Scoop first in path while running Scoop
    # Scoop will not be in path when first installed
    OLDPATH="$PATH"
    export PATH="$SCOOP_DIR:$PATH"

    "$SCOOP" "$@"

    # Reset cwd and path
    cd "$OLDPWD"
    unset OLDPWD

    export PATH="$OLDPATH"
    unset OLDPATH
}
